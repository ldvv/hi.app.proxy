1、问题记录：
	HashMap 不能按照插入顺序获取数据
	 --> 原    因：HashMap是散列映射, 插入数据不记录插入顺序 
	 --> 解决方案：使用LinkedHashMap（按照插入顺序遍历） || TreeMap（按照key值排序遍历）
	 
2、HashMap实现原理： 
	HashMap是数组+链表的形式实现。数组(主体) --> HashMap是一个key-value键值对数组，地址是由Hash值映射到数组下标;
								  链表 --> 如果发生Hash冲突则会在某个键值对进行链表存储。
	初始化主要包含容量(capacity 默认16)和负载因子(loadFactor 默认0.75)，  阈值(threshold = capacity * loadFactor)。
	HashMap的数据长度一般是2的次幂 --> 为了快速进行Hash运算（通过移位），提高效率； 不过也会导致Hash冲突增多。
	HashMap线程不安全（相比于Hashtable）， ConcurrentHashMap线程安全,但是效率比Hashtable高很多。
	产生于JDK1.2。
	
3、重写equals()方法必须重写hashCode()方法 --> HashMap会使用hashCode计算数组下标。

4、ConcurrentHashMap 采用分段锁的方式实现线程安全，所以效率高于Hashtable;
	原理 --> 通过hash值分桶存储，按照桶来实现锁。
	
5、bootstrap-table（参考文档）；

6、POST方式导出EXCEL文件（参考文档）。

7、EstablishSearch聚合实例：
	{"size": 1,"aggs": {"platform": {"terms": {"field": "platformId"},"aggs": {"assignUser": {"terms": {"field": "mainId"},"aggs": {"assignUser": {"terms": {"field": "assignUserId"},"aggs": {"sumTime": {"sum": {"field": "replyDelayTime"}}}}}}}}},"query": {"bool": {"must": [{"match": {"sendType": 0}},{"range": {"gmtCreate": {"gte": 1539273600000,"lt": 1539360000000}}}]}}}
	
8、idea格式化代码：Ctrl+Alt+L

9、//注释的正则表达式--- (/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|[ \t]*//.*) ---
  /***/注释的正则表达式--- (/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/) ---

